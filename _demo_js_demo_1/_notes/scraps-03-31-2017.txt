    //  try to handle all sorting, good luck.
    //  this works only for observable properties on a viewmodel
    //  this.DataArray().sort( function ( left, right )
    //  { return left.Name == right.Name ? 0 : ( left.Name < right.Name ? -1 : 1 ) } );
    //  sort string ascending
    //  if ( key_a < key_b ) return -1;
    //  sort string descending    
    //  if ( key_a > key_b ) return 1;
    //  return 0;        //  default return value (no sorting)



    <!--<div class="SortButtonsTop" data-bind="visible: DEBUGFLAG">
        <button data-bind="click: Click_SortByFirstName">Sort By First Name</button>
        <button data-bind="click: Click_SortByLastName">Sort By Last Name</button>
        <button data-bind="click: Click_SortByAge">Sort By Age</button>
        <button data-bind="click: Click_SortByBorn">Sort By Date Born</button>
        <button data-bind="click: Click_SortByDied">Sort By Date Died</button>
        <button data-bind="click: Click_SortByChildren">Sort By Number of Children</button>
    </div>-->

    <tr>
    <td data-bind="click: Click_SortByFirstName">
        <span  class="DataKeyName">First Name</span>
        <!--[<span data-bind="text: CurrentSort_FirstName().text"></span>]-->
        <span  class="DataKeySort" data-bind="html: CurrentSort_FirstName().arrow"></span>
    </td>
    <td data-bind="click: Click_SortByLastName">
        <span  class="DataKeyName">Last Name</span>
        <!--[<span data-bind="text: CurrentSort_LastName().text"></span>]-->
        <span  class="DataKeySort" data-bind="html: CurrentSort_LastName().arrow"></span>
    </td>
    <td data-bind="click: Click_SortByAge">
        <span  class="DataKeyName">Age</span>
        <!--[<span data-bind="text: CurrentSort_Age().text"></span>]-->       
        <span  class="DataKeySort" data-bind="html: CurrentSort_Age().arrow"></span>    
    </td>
    <td data-bind="click: Click_SortByBorn">
        <span  class="DataKeyName">Date Born</span>
        <!--[<span data-bind="text: CurrentSort_Born().text"></span>]-->     
        <span class="DataKeySort"  data-bind="html: CurrentSort_Born().arrow"></span>       
    </td>
    <td data-bind="click: Click_SortByDied">
        <span class="DataKeyName">Date Died</span>
        <!--[<span data-bind="text: CurrentSort_Died().text"></span>]-->
        <span  class="DataKeySort" data-bind="html: CurrentSort_Died().arrow"></span>                       
    </td>
    <td data-bind="click: Click_SortByChildren">
        <span class="DataKeyName">Children</span>
        <!--[<span data-bind="text: CurrentSort_Children().text"></span>]-->
        <span class="DataKeySort" data-bind="html: CurrentSort_Children().arrow"></span>
    </td>
    </tr>

    // old functionality, see first "SortButtonsTop" commented section
    this.CurrentSort_FirstName = ko.observable( this.SortType.DEFAULT );
    this.Click_SortByFirstName = function ( vm, ev )
    {
        //  console.debug( "1. SortByName.this.CurrentNameSort", this.CurrentSort_Name() );
        if ( this.CurrentSort_FirstName() == this.SortType2.DEFAULT )
        {   // console.debug( "unsorted" );
            this.CurrentSort_FirstName( this.SortType2.ASC );
        }
        else if ( this.CurrentSort_FirstName() == this.SortType2.ASC )
        {
            this.CurrentSort_FirstName( this.SortType2.DESC );
        }
        else if ( this.CurrentSort_FirstName() == this.SortType2.DESC )
        {
            this.CurrentSort_FirstName( this.SortType2.ASC );
        }   
        this.SortThisArray( "FirstName", this.CurrentSort_FirstName() );
        //  console.debug( "2. SortByName.this.CurrentNameSort", this.CurrentSort_Name() );

        // change siblings
        //  this.CurrentSort_FirstName( this.SortType2.DEFAULT );
        this.CurrentSort_LastName( this.SortType2.DEFAULT );
        this.CurrentSort_Age( this.SortType2.DEFAULT );
        this.CurrentSort_Born( this.SortType2.DEFAULT );
        this.CurrentSort_Died( this.SortType2.DEFAULT );
        this.CurrentSort_Children( this.SortType2.DEFAULT );
        return;
    };

    this.CurrentSort_LastName = ko.observable( this.SortType.DEFAULT );
    this.Click_SortByLastName = function ( vm, ev )
    {
        //  console.debug( "1. SortByName.this.CurrentNameSort", this.CurrentSort_Name() );
        if ( this.CurrentSort_LastName() == this.SortType2.DEFAULT )
        {   // console.debug( "unsorted" );
            this.CurrentSort_LastName( this.SortType2.ASC );
        }
        else if ( this.CurrentSort_LastName() == this.SortType2.ASC )
        {
            this.CurrentSort_LastName( this.SortType2.DESC );
        }
        else if ( this.CurrentSort_LastName() == this.SortType2.DESC )
        {
            this.CurrentSort_LastName( this.SortType2.ASC );
        }
        this.SortThisArray( "LastName", this.CurrentSort_LastName() );
        //  console.debug( "2. SortByName.this.CurrentNameSort", this.CurrentSort_Name() );

        // change siblings
        this.CurrentSort_FirstName( this.SortType2.DEFAULT );
        // this.CurrentSort_LastName( this.SortType2.DEFAULT );
        this.CurrentSort_Age( this.SortType2.DEFAULT );
        this.CurrentSort_Born( this.SortType2.DEFAULT );
        this.CurrentSort_Died( this.SortType2.DEFAULT );
        this.CurrentSort_Children( this.SortType2.DEFAULT );
        return;
    };

    this.CurrentSort_Age = ko.observable( this.SortType.DEFAULT );
    this.Click_SortByAge = function ( vm, ev )
    { 
        //  console.debug( "1. Click_SortByAge.this.CurrentSort_Age", this.CurrentSort_Age() );
        if ( this.CurrentSort_Age() == this.SortType2.DEFAULT )
        {   // console.debug( "unsorted" );
            this.CurrentSort_Age( this.SortType2.ASC );
        }
        else if ( this.CurrentSort_Age() == this.SortType2.ASC )
        {
            this.CurrentSort_Age( this.SortType2.DESC );
        }
        else if ( this.CurrentSort_Age() == this.SortType2.DESC )
        {
            this.CurrentSort_Age( this.SortType2.ASC );
        }
        this.SortThisArray( "Age", this.CurrentSort_Age() );
        //  console.debug( "2. Click_SortByAge.this.CurrentNameSort", this.CurrentSort_Name() );

        // change siblings
        this.CurrentSort_FirstName( this.SortType2.DEFAULT );
        this.CurrentSort_LastName( this.SortType2.DEFAULT );
        //this.CurrentSort_Age( this.SortType2.DEFAULT );
        this.CurrentSort_Born( this.SortType2.DEFAULT );
        this.CurrentSort_Died( this.SortType2.DEFAULT );
        this.CurrentSort_Children( this.SortType2.DEFAULT );
        return;
    };

    this.CurrentSort_Born = ko.observable( this.SortType.DEFAULT );
    this.Click_SortByBorn = function ( vm, ev )
    { 
        //  console.debug( "1. Click_SortByBorn.this.CurrentSort_Born", this.CurrentSort_Born() );
        if ( this.CurrentSort_Born() == this.SortType2.DEFAULT )
        {   // console.debug( "unsorted" );
            this.CurrentSort_Born( this.SortType2.ASC );
        }
        else if ( this.CurrentSort_Born() == this.SortType2.ASC )
        {
            this.CurrentSort_Born( this.SortType2.DESC );
        }
        else if ( this.CurrentSort_Born() == this.SortType2.DESC )
        {
            this.CurrentSort_Born( this.SortType2.ASC );
        }
        this.SortThisArray( "BornDate", this.CurrentSort_Born() );
        //  console.debug( "2. Click_SortByBorn.this.CurrentSort_Born", this.CurrentSort_Born() );

        // change siblings
        this.CurrentSort_FirstName( this.SortType2.DEFAULT );
        this.CurrentSort_LastName( this.SortType2.DEFAULT );
        this.CurrentSort_Age( this.SortType2.DEFAULT );
        //  this.CurrentSort_Born( this.SortType2.DEFAULT );
        this.CurrentSort_Died( this.SortType2.DEFAULT );
        this.CurrentSort_Children( this.SortType2.DEFAULT );
        return;
    };

    this.CurrentSort_Died = ko.observable( this.SortType.DEFAULT );
    this.Click_SortByDied = function ( vm, ev )
    {  
        //  console.debug( "1. Click_SortByDied.this.CurrentSort_Died", this.CurrentSort_Died() );
        if ( this.CurrentSort_Died() == this.SortType2.DEFAULT )
        {   // console.debug( "unsorted" );
            this.CurrentSort_Died( this.SortType2.ASC );
        }
        else if ( this.CurrentSort_Died() == this.SortType2.ASC )
        {
            this.CurrentSort_Died( this.SortType2.DESC );
        }
        else if ( this.CurrentSort_Died() == this.SortType2.DESC )
        {
            this.CurrentSort_Died( this.SortType2.ASC );
        }
        this.SortThisArray( "DiedDate", this.CurrentSort_Died() );
        //  console.debug( "2. Click_SortByDied.this.CurrentSort_Born", this.CurrentSort_Born() );

        // change siblings
        this.CurrentSort_FirstName( this.SortType2.DEFAULT );
        this.CurrentSort_LastName( this.SortType2.DEFAULT );
        this.CurrentSort_Age( this.SortType2.DEFAULT );
        this.CurrentSort_Born( this.SortType2.DEFAULT );
        //  this.CurrentSort_Died( this.SortType2.DEFAULT );
        this.CurrentSort_Children( this.SortType2.DEFAULT );
        return;
    };

    this.CurrentSort_Children = ko.observable( this.SortType.DEFAULT );
    this.Click_SortByChildren = function ( vm, ev )
    {
        //  console.debug( "1. Click_SortByChildren.this.CurrentSort_Children", this.CurrentSort_Children() );
        if ( this.CurrentSort_Children() == this.SortType2.DEFAULT )
        {   // console.debug( "unsorted" );
            this.CurrentSort_Children( this.SortType2.ASC );
        }
        else if ( this.CurrentSort_Children() == this.SortType2.ASC )
        {
            this.CurrentSort_Children( this.SortType2.DESC );
        }
        else if ( this.CurrentSort_Children() == this.SortType2.DESC )
        {
            this.CurrentSort_Children( this.SortType2.ASC );
        }
        this.SortThisArray( "Children", this.CurrentSort_Children() );
        //  console.debug( "2. Click_SortByChildren.this.CurrentSort_Children", this.CurrentSort_Children() );

        // change siblings
        this.CurrentSort_FirstName( this.SortType2.DEFAULT );
        this.CurrentSort_LastName( this.SortType2.DEFAULT );
        this.CurrentSort_Age( this.SortType2.DEFAULT );
        this.CurrentSort_Born( this.SortType2.DEFAULT );
        this.CurrentSort_Died( this.SortType2.DEFAULT );
        //  this.CurrentSort_Children( this.SortType2.DEFAULT );
        return;
    };



//ko.observableArray.fn.sortByProperty = function ( prop )
//{
//    this.sort( function ( obj1, obj2 )
//    {
//        if ( obj1[prop] == obj2[prop] )
//            return 0;
//        else if ( obj1[prop] < obj2[prop] )
//            return -1;
//        else
//            return 1;
//    } );
//}